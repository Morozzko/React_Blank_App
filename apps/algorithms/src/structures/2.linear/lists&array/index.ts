interface Array<T> {
	customMap<U>(callback: (value: T, index: number, array: T[]) => U): U[]
}

Array.prototype.customMap = function <T, U>(
	this: T[],
	callback: (value: T, index: number, array: T[]) => U
): U[] {
	const result: U[] = []

	for (let i = 0; i < this.length; i++) {
		result.push(callback(this[i], i, this))
	}

	return result
}

// Использование customMap:
const numbers: number[] = [1, 2, 3, 4, 5]
const squaredNumbers = numbers.customMap(value => value * value)
console.log(squaredNumbers) // [1, 4, 9, 16, 25]

// Массивы и списки - это две разные структуры данных, которые имеют свои особенности и применения.
//
// 1. Память: Массивы - это непрерывные блоки памяти, где элементы хранятся последовательно.
// В списке, элементы могут быть разбросаны по разным областям памяти,
// но они связаны друг с другом с помощью ссылок (указателей).
//
// 2. Вставка и удаление: Вставка и удаление элементов из массива может быть дорогостоящей операцией,
// так как приходится сдвигать остальные элементы для освобождения или заполнения места.
// В списках вставка и удаление происходят быстрее,
// так как достаточно обновить ссылки на предыдущий и следующий элементы.
//
// 3. Доступ к элементам: В массивах доступ к элементам происходит быстрее,
// так как они хранятся последовательно в памяти.
// В списках для доступа к элементу необходимо пройти по ссылкам от начала списка до нужного элемента,
// что занимает больше времени.
//
// 4. Размер: Массивы имеют фиксированный размер, который определяется при создании массива.
// Хотя в некоторых языках программирования (например, JavaScript) массивы могут динамически менять размер,
// эффективность таких операций может быть ниже, чем у списков.
// Списки, с другой стороны, являются динамическими структурами данных, и их размер может легко изменяться
// с добавлением или удалением элементов.
//
// 5. Типы: Массивы могут быть однородными (хранить элементы одного типа)
// или неоднородными (хранить элементы разных типов).
// Списки, как правило, являются однородными, хотя в зависимости от реализации могут хранить элементы разных типов.
//
// В целом, массивы подходят для случаев,
// когда количество элементов известно заранее и происходит частое обращение к элементам.
// Списки же лучше подходят для ситуаций,
// когда количество элементов заранее неизвестно, и часто происходят вставка и удаление элементов.
// В JavaScript структура данных, которая называется "массив" (Array), на самом деле является более сложной структурой,
// которая сочетает в себе характеристики и массивов, и списков.
// Это связано с тем, что массивы в JavaScript являются динамическими и могут менять свой размер
// в процессе выполнения программы.
//
// В большинстве случаев массивы в JavaScript работают как массивы, а не списки.
// Они обеспечивают быстрый доступ к элементам и хранят данные последовательно в памяти.
// Однако, благодаря динамичности размера массива и особенностям реализации движка JavaScript,
// эффективность операций вставки и удаления может быть сравнима со списками.
//
// Массивы в JavaScript можно рассматривать как гибрид массивов и списков,
// сочетающий в себе их характеристики и возможности.
